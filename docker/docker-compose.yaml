---
version: '3.7'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181
    
  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  ksql-server:
    image: confluentinc/cp-ksql-server:5.3.0
    hostname: ksql-server
    container_name: ksql-server
    depends_on:
      - broker
    ports:
      - "8090:8090"
    environment:
      KSQL_LISTENERS: http://0.0.0.0:8090
      KSQL_BOOTSTRAP_SERVERS: broker:9092
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"

  ksql-cli:
    image: confluentinc/cp-ksql-cli:5.3.1
    container_name: ksql-cli
    depends_on:
      - broker
      - ksql-server
    volumes:
      - /home/kafka/workspace/graymatter/ksql:/srv/docker/ksql
    entrypoint: 
      - /bin/bash
      - -c
      - |
        echo -e "\n\n⏳ Waiting for KSQL to be available before launching CLI\n"
        while [ $$(curl -s -o /dev/null -w %{http_code} http://ksql-server:8090/info) -eq 000 ] 
        do
          echo -e $$(date) "KSQL Server HTTP state: " $$(curl -s -o /dev/null -w %{http_code} http://ksql-server:8090/info) " (waiting for 200)"
          sleep 5
        done
        echo -e "\n\n-> Running KSQL commands\n"
        sleep 5
        cat /srv/docker/ksql/device_count/commands.sql <(echo 'EXIT')| ksql http://ksql-server:8090
        echo -e "\n\n-> Sleeping…\n"
        sleep infinity
      
  influxdb2:
    image: influxdb:2
    container_name: influxdb2
    depends_on:
      - ksql-cli
    ports:
      - 8086:8086
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: vt-ncr
      DOCKER_INFLUXDB_INIT_PASSWORD: vt#03085 
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: vt-token
      DOCKER_INFLUXDB_INIT_ORG: vt-log
      DOCKER_INFLUXDB_INIT_BUCKET: logdb

    volumes:
      - type: volume
        source: influxdb2-data
        target: /var/lib/influxdb2
      - type: volume
        source: influxdb2-config
        target: /etc/influxdb2
  
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    depends_on:
      - influxdb2
    ports:
      - '3000:3000'
    volumes:
      - grafana-storage:/var/lib/grafana
      - grafana-provisioning:/etc/grafana/provisioning
 
#  myconsumer-app:
#    container_name: myconsumer
#    build: ../consumer
#    depends_on:
#      - broker
#      - ksql-server
#      - ksql-cli
#      - influxdb
#    command:
#      - /bin/sh
#      - -c
#      - |
#        apk add --no-cache curl;
#        echo Waiting for influxdb API ...;
#        while ! nc -z influxdb 8086;
#        do
#          sleep 5;
#        done;
#        echo InfluxDB Ready ...; python consumer.py

volumes:
  grafana-storage:
  grafana-provisioning:
  influxdb2-data:
  influxdb2-config:
